# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- macos-vm-image

pool:
    vmImage: 'macOS-latest'

steps:
- task: Cache@2
  inputs:
    key: '.git/modules/unity/PolyAR_Unity/HEAD | PolyAR | Android'
    path: 'android/UnityExport'
    cacheHitVar: 'AndroidBuildReady'

- task: Cache@2
  inputs:
    key: '.git/modules/unity/PolyAR_Unity/HEAD | PolyAR | IOS'
    path: 'ios/UnityExport'
    cacheHitVar: 'IosBuildReady'

#il nome Ã¨ necessario per poter ottenere la variabile nel task successivo
- task: UnityGetProjectVersionTask@1
  name: unitygetprojectversion
  displayName: "Get Project Version"
  inputs:
    unityProjectPath: 'unity/PolyAR_Unity'
  condition: or(eq(variables.IosBuildReady,'false'),eq(variables.AndroidBuildReady,'false'))

- task: CmdLine@2
  displayName: u3d Install
  inputs:
    script: |
      gem install u3d
      export LC_ALL=en_US.UTF-8
      export LANG=en_US.UTF-8
  condition: or(eq(variables.IosBuildReady,'false'),eq(variables.AndroidBuildReady,'false'))

- task: CmdLine@2
  displayName: Init u3d
  inputs:
    script: 'u3d available -p'
  condition: or(eq(variables.IosBuildReady,'false'),eq(variables.AndroidBuildReady,'false'))

- task: CmdLine@2
  displayName: "Install Unity with components"
  inputs:
    script: 'sudo u3d install $(unitygetprojectversion.projectversion) -p Unity,Ios,Android,Android-sdk-ndk-tools,Android-ndk,Android-sdk-platform-tools,Android-open-jdk,Android-sdk-build-tools'
  condition: or(eq(variables.IosBuildReady,'false'),eq(variables.AndroidBuildReady,'false'))

- task: CmdLine@2
  displayName: Move Unity into correct folder
  inputs:
    script: |
     mkdir -p /Applications/Unity/Hub/Editor
     mv /Applications/Unity_$(unitygetprojectversion.projectversion) /Applications/Unity/Hub/Editor/$(unitygetprojectversion.projectversion)
     sudo chown -R runner /Applications/Unity/Hub/Editor/$(unitygetprojectversion.projectversion)
  condition: or(eq(variables.IosBuildReady,'false'),eq(variables.AndroidBuildReady,'false'))
  

- task: CmdLine@2
  displayName: Unity Acquire Licence
  inputs:
    script: '/Applications/Unity/Hub/Editor/2019.3.0f3/Unity.app/Contents/MacOS/Unity -batchmode -quit -nographics -username $(username) -password $(password) -serial $(serialcode) -logfile /Users/runner/runners/2.163.1/work/1/s/UnityActivationLog.log'
  condition: or(eq(variables.IosBuildReady,'false'),eq(variables.AndroidBuildReady,'false'))


# sono costretto a disattivarlo altrimenti la fase di postjob crea un errore
#- task: UnityActivateLicenseTask@1
#  displayName: Activate License
#  inputs:
#    username: '$(username)'
#    password: '$(password)'
#    serial: '$(serialcode)'
#    unityEditorsPathMode: 'unityHub'
#    unityProjectPath: 'unity/PolyAR_Unity'
#  condition: or(eq(variables.IosBuildReady,'false'),eq(variables.AndroidBuildReady,'false'))
    
- task: UnityBuildTask@3
  displayName: Unity build Android
  inputs:
    buildTarget: 'Android'
    unityProjectPath: 'unity/PolyAR_Unity'
    buildScriptType: 'existing'
    outputFileName: 'drop'
    scriptExecuteMethod: 'AzureDevOps.PerformAndroidBuild'
  condition: or(eq(variables.IosBuildReady,'false'),eq(variables.AndroidBuildReady,'false'))
    
- task: UnityBuildTask@3
  displayName: Unity build iOS
  inputs:
    buildTarget: 'Ios'
    unityProjectPath: 'unity/PolyAR_Unity'
    buildScriptType: 'existing'
    outputFileName: 'drop'
    scriptExecuteMethod: 'AzureDevOps.PerformIOSBuild'
  condition: or(eq(variables.IosBuildReady,'false'),eq(variables.AndroidBuildReady,'false'))


- task: CmdLine@2
  displayName: Unity Return Licence
  inputs:
    script: '/Applications/Unity/Hub/Editor/2019.3.0f3/Unity.app/Contents/MacOS/Unity -batchmode -quit -returnlicense'
  condition: or(eq(variables.IosBuildReady,'false'),eq(variables.AndroidBuildReady,'false'))

- task: PowerShell@2
  displayName: Copy template build gradle for android
  inputs:
    targetType: 'inline'
    script: |
      # Write your PowerShell commands here.
      Copy-Item "android\build.gradle.template" -Destination "android\UnityExport\build.gradle"
  condition: or(eq(variables.IosBuildReady,'false'),eq(variables.AndroidBuildReady,'false'))

- task: FlutterInstall@0
  displayName: Install flutter
  inputs:
    channel: 'beta'
    version: 'latest'

- task: FlutterBuild@0
  displayName: Build flutter android
  inputs:
    target: 'apk'
    projectDirectory: '.'
    debugMode: true

- task: FlutterBuild@0
  displayName: Build flutter ios
  inputs:
    target: 'ios'
    projectDirectory: '.'
    debugMode: true
    iosCodesign: false

- task: CmdLine@2
  displayName: Creating ipa
  inputs:
    script: |
      mkdir -p Payload
      mv Runner.app Payload/Runner.app
      zip -qr app_ios.ipa Payload
    workingDirectory: 'build/ios/iphoneos'

- task: PublishBuildArtifacts@1
  displayName: Publish Android
  inputs:
    PathtoPublish: 'build/app/outputs/apk/app.apk'
    ArtifactName: 'Release'
    publishLocation: 'Container'

- task: PublishBuildArtifacts@1
  displayName: Publish IOS
  inputs:
    PathtoPublish: 'build/ios/iphoneos/app_ios.ipa'
    ArtifactName: 'Release'
    publishLocation: 'Container'
